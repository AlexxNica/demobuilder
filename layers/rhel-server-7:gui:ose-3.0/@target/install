#!/bin/bash -ex

. vm-functions

ANSIBLE_TAG=3.0.0-8
MY_HOSTNAME=openshift.example.com

# rhel-7-server-optional-rpms is required for python-jinja2, required by ansible
register_channels rhel-7-server-rpms rhel-7-server-optional-rpms rhel-7-server-ose-3.0-rpms

yum_install bind-utils git httpd-tools iptables-services lsof openshift-master openshift-sdn-ovs PyPAM python-requests net-tools nmap-ncat PyYAML strace tcpdump unzip

OPENSHIFTVERSION=$(rpm -q openshift --qf '%{VERSION}')

for image in \
    registry.access.redhat.com/openshift3/ose-deployer:v$OPENSHIFTVERSION \
    registry.access.redhat.com/openshift3/ose-docker-registry:v$OPENSHIFTVERSION \
    registry.access.redhat.com/openshift3/ose-haproxy-router:v$OPENSHIFTVERSION \
    registry.access.redhat.com/openshift3/ose-pod:v$OPENSHIFTVERSION \
    registry.access.redhat.com/openshift3/ose-sti-builder:v$OPENSHIFTVERSION \
    ; do
  docker_pull $image
done

yum_install $MIRROR_FEDORA/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
sed -i -e "s!^#baseurl=http://download.fedoraproject.org/!baseurl=$MIRROR_FEDORA/!; s/^mirrorlist=/#mirrorlist=/" /etc/yum.repos.d/epel.repo
yum_install ansible
yum_remove epel-release-7-5
rm /etc/yum.repos.d/epel.repo.rpmsave

https_proxy=$PROXY curl -sO https://github.com/openshift/openshift-ansible/archive/v$ANSIBLE_TAG.zip
unzip -q v$ANSIBLE_TAG.zip

hostname $MY_HOSTNAME
echo $MY_HOSTNAME >/etc/hostname

echo "$(ifconfig eth0 | awk '/inet / { print $2; }') $MY_HOSTNAME" >>/etc/hosts

curl -so /root/.ssh/id_rsa $APILISTENER/static/keys/demobuilder
chmod 0600 /root/.ssh/id_rsa

cat >/etc/ansible/hosts <<EOF
[OSEv3:children]
masters
nodes

[OSEv3:vars]
deployment_type=enterprise
openshift_master_identity_providers=[{'name': 'basicauthpassword', 'login': 'true', 'challenge': 'true', 'kind': 'BasicAuthPasswordIdentityProvider', 'url': 'http://localhost:2305/'}]

[masters]
$MY_HOSTNAME

[nodes]
$MY_HOSTNAME openshift_hostname=$MY_HOSTNAME
EOF

ANSIBLE_HOST_KEY_CHECKING=0 python -u /usr/bin/ansible-playbook openshift-ansible-$ANSIBLE_TAG/playbooks/byo/config.yml

https_proxy=$PROXY curl -s https://pypi.python.org/packages/source/d/dnslib/dnslib-0.9.4.tar.gz | tar -xz
pushd dnslib-0.9.4
python setup.py install
popd

for svc in auth dns-intercept master-ipcfg node-ipcfg routewatcher; do
  cp openshift-$svc.py /usr/local/libexec
  cp openshift-$svc.service /lib/systemd/system
  systemctl enable openshift-$svc
done
systemctl start openshift-dns-intercept.service

cp dhclient-eth0-up-hooks /etc/dhcp
semanage fcontext --add -t net_conf_t /etc/hosts
restorecon -v /etc/hosts

oadm new-project demo --admin=demo
mkdir /home/demo/.kube
cat <<EOF >/home/demo/.kube/config
kind: Config
apiVersion: v1
clusters:
- cluster:
    server: https://$MY_HOSTNAME:8443
  name: ${MY_HOSTNAME//./-}:8443
contexts:
- context:
    cluster: ${MY_HOSTNAME//./-}:8443
  name: ${MY_HOSTNAME//./-}:8443
current-context: ${MY_HOSTNAME//./-}:8443
EOF
chown -R demo:demo /home/demo/.kube

echo '{"kind": "ServiceAccount", "apiVersion": "v1", "metadata": {"name": "infra"}}' | oc create -f -
(oc get -o yaml scc privileged; echo - system:serviceaccount:default:infra) | oc replace scc privileged -f -
mkdir /registry
oadm registry --config=/etc/openshift/master/admin.kubeconfig --credentials=/etc/openshift/master/openshift-registry.kubeconfig --mount-host=/registry --service-account=infra --images='registry.access.redhat.com/openshift3/ose-${component}:${version}'

oadm router --credentials=/etc/openshift/master/openshift-router.kubeconfig --service-account=infra --images='registry.access.redhat.com/openshift3/ose-${component}:${version}'

for ((i = 0; i < 12; i++)); do
  [ $(oc get pods | grep -v -- -deploy | grep Running | wc -l) = 2 -a $(oc get pods | grep -- -deploy | wc -l) = 0 ] && break
  sleep 10
done
[ $(oc get pods | grep -v -- -deploy | grep Running | wc -l) = 2 -a $(oc get pods | grep -- -deploy | wc -l) = 0 ] || exit 1

rm /root/.ssh/id_rsa /root/.ssh/known_hosts

cp /etc/openshift/master/ca.crt /etc/pki/ca-trust/source/anchors/
update-ca-trust

firefox_set_homepage https://$MY_HOSTNAME:8443/

sed -i -e '/FORWARD/ a\
-A OS_FIREWALL_ALLOW -p tcp -m state --state NEW -m tcp --dport 5900 -j ACCEPT' /etc/sysconfig/iptables

cat >>/usr/local/bin/demobuilder-cleanup.sh <<'EOF'
systemctl stop openshift-node.service
oc delete pods --all
docker ps -aq | xargs docker rm -f
EOF
